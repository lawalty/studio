
'use server';
/**
 * @fileOverview A flow to test the core text generation functionality.
 * This is a minimal test to see if we can connect to a Gemini model.
 *
 * - testTextGeneration - A function that calls the text generation model.
 * - TestTextGenerationOutput - The return type.
 */
import { z } from 'zod';
import { ai } from '@/ai/genkit'; // Ensures Genkit is configured
import { withRetry } from './index-document-flow';


const TestTextGenerationOutputSchema = z.object({
  success: z.boolean().describe('Indicates if the generation was successful.'),
  error: z.string().optional().describe('An error message if the test failed.'),
  generatedText: z.string().optional().describe('The text generated by the model.'),
});
export type TestTextGenerationOutput = z.infer<typeof TestTextGenerationOutputSchema>;

const testTextGenerationFlow = async (): Promise<TestTextGenerationOutput> => {
    try {
      const { text } = await withRetry(() => ai.generate({
          model: 'googleai/gemini-1.5-pro',
          prompt: 'Tell me a one-sentence joke.',
      }));

      if (text) {
        return {
          success: true,
          generatedText: text,
        };
      } else {
        return {
          success: false,
          error: `The text generation service returned a successful but empty response.`,
        };
      }
    } catch (e: any) {
        console.error('[testTextGenerationFlow] Exception caught:', e);
        const rawError = e instanceof Error ? e.message : JSON.stringify(e);
        let detailedError: string;

        if (rawError.includes("API key not valid")) {
            detailedError = "The provided Google AI API Key is invalid. Please verify it in your .env.local file or hosting provider's secret manager.";
        } else if (rawError.includes("API key is missing")) {
            detailedError = "The GEMINI_API_KEY environment variable is not set. Please add it to your .env.local file or hosting provider's secret manager.";
        } else if (rawError.includes("permission denied") || rawError.includes('IAM')) {
            detailedError = `A permissions issue occurred. Please check that the 'Vertex AI API' is enabled in your Google Cloud project and that your account has the correct IAM permissions.`;
        } else if (rawError.includes("PROJECT_BILLING_NOT_ENABLED")) {
            detailedError = `CRITICAL: The text generation feature failed because billing is not enabled for your Google Cloud project. Please link a billing account in the Google Cloud Console.`;
        } else if (rawError.toLowerCase().includes('service unavailable') || rawError.includes('503')) {
            detailedError = `The model is currently overloaded or unavailable (503 Service Unavailable). The retry mechanism failed after several attempts. Please try again later. Full error: ${rawError}`;
        } else {
            detailedError = `The text generation test failed. This is most often caused by a missing/invalid GEMINI_API_KEY or a Google Cloud project configuration issue (e.g., Vertex AI API or billing not enabled). Full error: ${rawError}`;
        }
        
        return { success: false, error: detailedError };
    }
  };
  
export async function testTextGeneration(): Promise<TestTextGenerationOutput> {
  return testTextGenerationFlow();
}
